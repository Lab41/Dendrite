#!/usr/bin/env python

import argparse
import datetime
import getpass
import json
import requests
import sys
import time
from contextlib import closing

# ----------------------------------------------------------------------------

class Connection(object):
    """
    Connect to dendrite
    """

    def __init__(self, args):
        self.session = requests.Session()
        self.session.auth = (args.user, args.password)
        self.url = args.url

    def close(self):
        self.session.close()

    def request(self, method, url, *args, **kwargs):
        url = "{}{}".format(self.url, url)

        response = self.session.request(method, url, *args, **kwargs)
        response.raise_for_status()

        return response

    def get(self, *args, **kwargs):
        return self.request('GET', *args, **kwargs)

    def post(self, *args, **kwargs):
        return self.request('POST', *args, **kwargs)

    def post_json(self, *args, **kwargs):
        kwargs = dict(kwargs)
        kwargs['data'] = json.dumps(kwargs.pop('data', {}))

        headers = kwargs.pop('headers', {})
        headers['content-type'] = 'application/json'
        kwargs['headers'] = headers

        return self.post(*args, **kwargs)

    def put(self, *args, **kwargs):
        return self.request('PUT', *args, **kwargs)

    def put_json(self, *args, **kwargs):
        kwargs = dict(kwargs)
        kwargs['data'] = json.dumps(kwargs.pop('data', {}))

        headers = kwargs.pop('headers', {})
        headers['content-type'] = 'application/json'
        kwargs['headers'] = headers

        return self.put(*args, **kwargs)

    def delete(self, *args, **kwargs):
        return self.request('DELETE', *args, **kwargs)

# ------------------------------------------------------------------------------

class Table(object):
    """
    Abstract interface that represents a graph.
    """

    URL_PATH = None
    LIST_KEY = None
    GET_KEY = None

    @classmethod
    def list(cls, conn):
        response = conn.get(cls.URL_PATH)
        for row in response.json()[cls.LIST_KEY]:
            yield cls(conn, **row)

    @classmethod
    def get(cls, conn, id):
        data = conn.get('{}/{}'.format(cls.URL_PATH, id)).json()[cls.GET_KEY]
        return cls(conn, **data)

    def __init__(self, conn, **data):
        self.conn = conn
        self.update(data)

    @property
    def id(self):
        return self.data['_id']

    def refresh(self):
        """Requeries the object with the latest database state"""
        self.update(self.get(self.conn, self.id).data)

    def update(self, data):
        self.data = data

    def delete(self):
        response = self.conn.delete('{}/{}'.format(self.URL_PATH, self.id)).json()

# ------------------------------------------------------------------------------

class Project(Table):
    URL_PATH = '/api/projects'
    GET_KEY = 'project'
    LIST_KEY = 'projects'

    @classmethod
    def create(cls, conn, name):
        """Create a Dendrite project"""

        data = { 'name': name }
        response = conn.post_json(cls.URL_PATH, data=data)
        project_data = response.json()[cls.GET_KEY]

        return Project(conn, **project_data)

    @property
    def name(self):
        return self.data['name']

    @property
    def current_graph(self):
        """Return the current Graph instance"""

        if not hasattr(self, '_current_graph') or self._current_graph is None:
            graph_id = self.data.get('current_graph', None)
            if graph_id is None:
                return None

            self._current_graph = Graph.get(self.conn, graph_id)

        return self._current_graph

    def branches(self):
        response = self.conn.get('{}/{}/branches'.format(self.URL_PATH, self.id))
        for record in response.json()[Branch.LIST_KEY]:
            yield Branch(self.conn, **record)

    def graphs(self):
        response = self.conn.get('{}/{}/graphs'.format(self.URL_PATH, self.id))
        for record in response.json()[Graph.LIST_KEY]:
            yield Graph(self.conn, **record)

    def jobs(self):
        response = self.conn.get('{}/{}/jobs'.format(self.URL_PATH, self.id))
        for record in response.json()[Job.LIST_KEY]:
            yield Graph(self.conn, **record)

    def create_branch(self, name, graph=None):
        if graph is None:
            graph_id = None
        else:
            graph_id = graph.id

        data = {'graphId': graph_id}

        response = self.conn.put_json('{}/{}/branches/{}'.format(self.URL_PATH, self.id, name),
                data=data)

        response = response.json()

        return Job.get(self.conn, response['jobId'])

    def checkout_branch(self, name):
        """Create a branch"""

        data = {'branchName': name}
        response = self.conn.put_json('{}/{}/current-branch'.format(self.URL_PATH, self.id),
            data=data)

        return response.json()['msg']

    def commit_branch(self, name=None):
        if name is None:
            url = '{}/{}/current-branch/commit'.format(self.URL_PATH, self.id)
        else:
            url = '{}/{}/branches/{}/commit'.format(self.URL_PATH, self.id, name)

        response = self.conn.post(url).json()

        return Job.get(self.conn, response['jobId'])

    def commit_subset_branch(self, query, steps, name=None):
        if name is None:
            url = '{}/{}/current-branch/commit-subset'.format(self.URL_PATH, self.id)
        else:
            url = '{}/{}/branches/{}/commit-subset'.format(self.URL_PATH, self.id, name)

        if query is None:
            query = ''

        data = {
            'query': query,
            'steps': steps,
        }
        response = self.conn.post_json(url, data=data).json()

        return Job.get(self.conn, response['jobId'])

    def export_subset(self, name, query, steps):
        url = '{}/{}/current-branch/export-subset'.format(self.URL_PATH, self.id)

        if query is None:
            query = ''

        data = {
            'name': name,
            'query': query,
            'steps': steps,
        }

        response = self.conn.post_json(url, data=data).json()

        return Job.get(self.conn, response['jobId'])

# ------------------------------------------------------------------------------

class Branch(Table):
    URL_PATH = '/api/branches'
    GET_KEY = 'branch'
    LIST_KEY = 'branches'

# ------------------------------------------------------------------------------

class Graph(Table):
    URL_PATH = '/api/graphs'
    GET_KEY = 'graph'
    LIST_KEY = 'graphs'

    def import_graph(self, graph_format, graph_file, graph_indices_file):
        response = self.conn.post('{}/{}/file-import'.format(self.URL_PATH, self.id),
                data={
                    'format': graph_format,
                    'searchkeys': graph_indices_file.read(),
                },
                files={ 'file': graph_file })

    def export_graph(self, format):
        response = self.conn.post('/api/graphs/{}/file-export'.format(self.id),
                data={ 'format': format })

        return response.content

    def run_groovy(self, script):
        url = '/rexster-resource/graphs/{}/tp/gremlin'.format(self.id)
        data = { 'script': script.read() }
        return self.conn.post_json(url, data=data).json()

    def run_titan_degrees(self, algorithm):
        url = '/api/graphs/{}/analysis/titan-{}'.format(self.id, algorithm)
        response = self.conn.post(url).json()

        return Job.get(self.conn, response['jobId'])

    def run_faunus(self, algorithm):
        url = '/api/graphs/{}/analysis/faunus-{}'.format(self.id, algorithm)
        response = self.conn.post(url).json()

        return Job.get(self.conn, response['jobId'])

    def run_graphlab(self, algorithm):
        url = '/api/graphs/{}/analysis/{}'.format(self.id, algorithm)
        response = self.conn.post(url).json()

        return Job.get(self.conn, response['jobId'])

    def run_snap(self, algorithm):
        url = '/api/graphs/{}/analysis/snap/{}'.format(self.id, algorithm)
        response = self.conn.post(url).json()

        return Job.get(self.conn, response['jobId'])

    def run_jung(self, algorithm, alpha=0.15):
        url = '/api/graphs/{}/analysis/jung-{}'.format(self.id, algorithm)
        response = self.conn.post_json(url).json()
        if algorithm == "pagerank":
            data = { 'alpha': alpha }
            response = self.conn.post_json(url, data=data).json()

        return Job.get(self.conn, response['jobId'])

# ------------------------------------------------------------------------------

class Job(Table):
    URL_PATH = '/api/jobs'
    GET_KEY = 'job'
    LIST_KEY = 'jobs'

    @property
    def name(self):
        return self.data['name']

    @property
    def state(self):
        return self.data['state']

    @property
    def progress(self):
        return self.data['progress']

    def wait_until_finished(self):
        states = ['DONE', 'ERROR']

        if self.state not in states:
            print 'waiting for job {} ({}) to finish...'.format(self.name, self.id)

            starttime = datetime.datetime.now()
            msg = ''

            def print_step():
                now = datetime.datetime.now()
                msg = '{}    state: {}    {:.0%} completed'.format(
                        str(now - starttime).split('.')[0],
                        self.state,
                        self.progress)
                sys.stdout.write('\r')
                sys.stdout.write(' ' * len(msg))
                sys.stdout.write('\r')
                sys.stdout.write(msg)
                sys.stdout.flush()

            while self.state not in ['DONE', 'ERROR']:
                print_step()
                time.sleep(1)
                self.refresh()

            print_step()
            print

        if self.state == 'DONE':
            print 'job finished successfully'
        else:
            print 'job errored out'
            if 'msg' in self.data:
                print self.data['msg']

# ------------------------------------------------------------------------------

# A function that converts a multilevel dictionary into a flat dictionary.
def flatten_dict(d):
    out_d = {}
    path = []

    def f(d):
        for key, value in d.iteritems():
            path.append(key)
            if isinstance(value, dict):
                f(value)
            else:
                out_d['.'.join(path)] = value
            path.pop()

    f(d)

    return out_d

# A simple function to print out some rows
def print_records(args, rows):
    # Lets make the output pretty for hierarchical rows.
    rows = [flatten_dict(row.data) for row in rows]

    if len(rows) == 0:
        return
    
    # If we didn't have some headers passed in, extract them from the dataset.
    headers = args.headers
    if headers is None:
        headers = set()
        for row in rows:
            for header in row.iterkeys():
                headers.add(header)
        headers = sorted(headers)

    sizes = [len(header) for header in headers]

    for row in rows:
        for i, header in enumerate(headers):
            value = row.get(header)
            if value is not None:
                value = str(value)
                if sizes[i] < len(value):
                    sizes[i] = len(value)

    # Show the headers if that's what the user wants.
    if args.show_headers:
        for i, header in enumerate(headers):
            sys.stdout.write(header.ljust(sizes[i]))
            sys.stdout.write(' ')
        print

        for size in sizes:
            sys.stdout.write('=' * size)
            sys.stdout.write(' ')
        print

    for row in rows:
        for i, header in enumerate(headers):
            value = row.get(header)
            if value is None:
                sys.stdout.write(' ' * sizes[i])
                sys.stdout.write(' ')
            else:
                sys.stdout.write(str(value).ljust(sizes[i]))
                sys.stdout.write(' ')
        print

# ----------------------------------------------------------------------------

def create_project(args):
    with closing(Connection(args)) as conn:
        print 'Creating project...'
        project = Project.create(conn, args.name)
        print_records(args, [project])

        if args.script:
            run_groovy_on_graph(project.current_graph, args)

    return 0

# ----------------------------------------------------------------------------

def show_projects(args):
    with closing(Connection(args)) as conn:
        print_records(args, Project.list(conn))

def show_project_branches(args):
    with closing(Connection(args)) as conn:
        project = Project.get(conn, args.id)
        print_records(args, project.branches())

def project_create_branch(args):
    with closing(Connection(args)) as conn:
        project = Project.get(conn, args.id)
        if args.graph_id:
            graph = Graph.get(conn, args.graph_id)
        else:
            graph = None

        job = project.create_branch(args.name, graph)
        job.wait_until_finished()

def project_checkout_branch(args):
    with closing(Connection(args)) as conn:
        project = Project.get(conn, args.id)
        msg = project.checkout_branch(args.name)
        print msg

def project_commit_branch(args):
    with closing(Connection(args)) as conn:
        project = Project.get(conn, args.id)
        job = project.commit_branch()
        job.wait_until_finished()

def project_commit_subset_branch(args):
    with closing(Connection(args)) as conn:
        project = Project.get(conn, args.id)
        job = project.commit_subset_branch(args.query, args.steps)
        job.wait_until_finished()

def project_export_subset(args):
    with closing(Connection(args)) as conn:
        project = Project.get(conn, args.id)
        job = project.export_subset(args.name, args.query, args.steps)
        job.wait_until_finished()

def show_project_graphs(args):
    with closing(Connection(args)) as conn:
        project = Project.get(conn, args.id)
        print_records(args, project.graphs())

def show_project_jobs(args):
    with closing(Connection(args)) as conn:
        project = Project.get(conn, args.id)
        print_records(args, project.jobs())

def show_branches(args):
    with closing(Connection(args)) as conn:
        print_records(args, Branch.list(conn))

def show_graphs(args):
    with closing(Connection(args)) as conn:
        print_records(args, Graph.list(conn))

def show_jobs(args):
    with closing(Connection(args)) as conn:
        print_records(args, Job.list(conn))

# ----------------------------------------------------------------------------

def delete_project(args):
    with closing(Connection(args)) as conn:
        project = Project.get(conn, args.id)
        project.delete()
        print 'project deleted'

def delete_graph(args):
    with closing(Connection(args)) as conn:
        graph = Graph.get(conn, args.id)
        graph.delete()
        print 'graph deleted'

def delete_job(args):
    with closing(Connection(args)) as conn:
        job = Job.get(conn, args.id)
        job.delete()
        print 'job deleted'

# ----------------------------------------------------------------------------

def import_graph(args):
    with closing(Connection(args)) as conn:
        graph = Graph.get(conn, args.id)

        print 'Importing graph...'
        graph.import_graph(
                args.graph_format,
                args.graph_file,
                args.graph_indices_file)
        print 'graph imported'

    return 0

def export_graph(args):
    with closing(Connection(args)) as conn:
        graph = Graph.get(conn, args.id)

        print 'Importing graph...'
        content = graph.export_graph(args.format)
        print 'graph exported'

        with closing(args.output_file or sys.stdout) as output_file:
            output_file.write(content)
            output_file.flush()

            # It looks nicer if we add a trailing null when printing out to stdout.
            if output_file is sys.stdout:
                output_file.write('\n')

    return 0

# ----------------------------------------------------------------------------

def run_groovy_on_graph(graph, args):
    print 'Running the groovy script...'
    response = graph.run_groovy(args.script)

    if args.pretty:
        print json.dumps(response, indent=2)
    else:
        print json.dumps(response)

def run_groovy(args):
    with closing(Connection(args)) as conn:
        graph = Graph.get(conn, args.id)

        run_groovy_on_graph(graph, args)

    return 0

# ----------------------------------------------------------------------------

def run_titan(args):
    with closing(Connection(args)) as conn:
        graph = Graph.get(conn, args.id)

        print 'Running Titan ' + args.algorithm + ' analysis...'
        job = graph.run_titan(args.algorithm)
        job.wait_until_finished()

def run_faunus(args):
    with closing(Connection(args)) as conn:
        graph = Graph.get(conn, args.id)

        print 'Running Faunus ' + args.algorithm + ' analysis...'
        job = graph.run_faunus(args.algorithm)
        job.wait_until_finished()

def run_graphlab(args):
    with closing(Connection(args)) as conn:
        graph = Graph.get(conn, args.id)

        print 'Running GraphLab ' + args.algorithm + ' analysis...'
        job = graph.run_graphlab(args.algorithm)
        job.wait_until_finished()

def run_snap(args):
    with closing(Connection(args)) as conn:
        graph = Graph.get(conn, args.id)

        print 'Running Snap ' + args.algorithm + ' analysis...'
        job = graph.run_snap(args.algorithm)
        job.wait_until_finished()

def run_jung(args):
    with closing(Connection(args)) as conn:
        graph = Graph.get(conn, args.id)

        print 'Running Jung ' + args.algorithm + ' analysis...'
        job = graph.run_jung(algorith, args.alpha)
        job.wait_until_finished()

    return 0

# ----------------------------------------------------------------------------

def not_empty(string):
    if string == '':
        raise argparse.ArgumentTypeError('cannot be empty')
    return string

def split_args(string):
    return string.split(',')

def output_or_stdout(string):
    if string == '-':
        return sys.stdout
    return argparse.FileType('wb')(string)

# ----------------------------------------------------------------------------

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-u', '--user',
            help='the dendrite user. May include password after a ":"')
    parser.add_argument('--password',
            help='the dendrite password')
    parser.add_argument('--url',
            help='which server to use',
            default='http://localhost:8000/dendrite')
    parser.add_argument('--no-headers', '--nh',
            dest='show_headers',
            help='do not show headers',
            action='store_false',
            default=True)
    parser.add_argument('--headers',
            dest='headers',
            help='headers to display. Default is to show all. Separate by commas',
            type=split_args)

    subparsers = parser.add_subparsers(
            help='sub-command help')

    # Options for creating a project.
    parser_create_project = subparsers.add_parser('create-project')
    parser_create_project.add_argument('name',
            type=not_empty)
    parser_create_project.add_argument('--script',
            type=argparse.FileType('rb'),
            help="run this groovy script after creating the project")
    parser_create_project.add_argument('--pretty',
            default=False,
            action='store_true',
            help='Prettify the groovy json response')
    parser_create_project.set_defaults(func=create_project)

    # Options for showing projects.
    parser_show_projects = subparsers.add_parser('projects')
    parser_show_projects.set_defaults(func=show_projects)

    # Options for showing project branches.
    parser_show_project_branches = subparsers.add_parser('project-branches')
    parser_show_project_branches.add_argument('id',
            type=int)
    parser_show_project_branches.set_defaults(func=show_project_branches)

    # Options for creating a out project branch.
    parser_create_branch = subparsers.add_parser('project-branch')
    parser_create_branch.add_argument('id',
            type=int)
    parser_create_branch.add_argument('name',
            type=not_empty)
    parser_create_branch.add_argument('graph_id',
            nargs='?')
    parser_create_branch.set_defaults(func=project_create_branch)

    # Options for checking out project branches.
    parser_checkout_branch = subparsers.add_parser('project-checkout')
    parser_checkout_branch.add_argument('id',
            type=int)
    parser_checkout_branch.add_argument('name',
            type=not_empty)
    parser_checkout_branch.set_defaults(func=project_checkout_branch)

    # Options for committing project branches.
    parser_commit_branch = subparsers.add_parser('project-commit')
    parser_commit_branch.add_argument('id',
            type=int)
    parser_commit_branch.set_defaults(func=project_commit_branch)

    # Options for exporting project branches.
    parser_export_subset = subparsers.add_parser('project-export')
    parser_export_subset.add_argument('id',
            type=int)
    parser_export_subset.add_argument('name',
            type=not_empty)
    parser_export_subset.add_argument('query')
    parser_export_subset.add_argument('steps',
            type=int)
    parser_export_subset.set_defaults(func=project_export_subset)

    # Options for showing project graphs.
    parser_show_project_graphs = subparsers.add_parser('project-graphs')
    parser_show_project_graphs.add_argument('id',
            type=int)
    parser_show_project_graphs.set_defaults(func=show_project_graphs)

    # Options for showing project jobs.
    parser_show_project_jobs = subparsers.add_parser('project-jobs')
    parser_show_project_jobs.add_argument('id',
            type=int)
    parser_show_project_jobs.set_defaults(func=show_project_jobs)

    # Options for showing branches.
    parser_show_branches = subparsers.add_parser('branches')
    parser_show_branches.set_defaults(func=show_branches)

    # Options for showing graphs.
    parser_show_graphs = subparsers.add_parser('graphs')
    parser_show_graphs.set_defaults(func=show_graphs)

    # Options for showing jobs.
    parser_show_jobs = subparsers.add_parser('jobs')
    parser_show_jobs.set_defaults(func=show_jobs)

    # Options for deleting a project.
    parser_delete_project = subparsers.add_parser('delete-project')
    parser_delete_project.add_argument('id',
            type=int)
    parser_delete_project.set_defaults(func=delete_project)

    # Options for deleting a graph.
    parser_delete_graph = subparsers.add_parser('delete-graph')
    parser_delete_graph.add_argument('id',
            type=int)
    parser_delete_graph.set_defaults(func=delete_graph)

    # Options for deleting a job.
    parser_delete_job = subparsers.add_parser('delete-job')
    parser_delete_job.add_argument('id',
            type=int)
    parser_delete_job.set_defaults(func=delete_job)

    # Options for importing a graph.
    parser_import_graph = subparsers.add_parser('import-graph')
    parser_import_graph.add_argument('id',
            type=int)
    parser_import_graph.add_argument('graph_format',
            type=lambda s: s.lower(),
            choices=['graphson', 'graphml', 'gml'])
    parser_import_graph.add_argument('graph_file',
            type=argparse.FileType('rb'))
    parser_import_graph.add_argument('graph_indices_file',
            type=argparse.FileType('rb'))
    parser_import_graph.set_defaults(func=import_graph)

    # Options for exporting a graph.
    parser_export_graph = subparsers.add_parser('export-graph')
    parser_export_graph.add_argument('-o', '--output-file',
            help='write to this file',
            type=output_or_stdout)
    parser_export_graph.add_argument('id',
            type=int)
    parser_export_graph.add_argument('format',
            type=lambda s: s.lower(),
            choices=['graphson', 'graphml', 'gml'])
    parser_export_graph.set_defaults(func=export_graph)

    # Options for running jobs.
    parse_run = subparsers.add_parser('run')
    run_subparsers = parse_run.add_subparsers(
            help='run sub-command help')
    parser_run_groovy = run_subparsers.add_parser('groovy')
    parser_run_groovy.add_argument('--pretty',
            default=False,
            action='store_true',
            help='Prettify the groovy json response')
    parser_run_groovy.add_argument('id',
            type=not_empty,
            help='the id of the graph according to rexster')
    parser_run_groovy.add_argument('script',
            type=argparse.FileType('rb'))
    parser_run_groovy.set_defaults(func=run_groovy)

    parser_run_titan = run_subparsers.add_parser('titan')
    parser_run_titan.add_argument('id',
            type=int)
    parser_run_titan.add_argument('algorithm',
            choices=['degrees'])
    parser_run_titan.set_defaults(func=run_titan)

    parser_run_faunus = run_subparsers.add_parser('faunus')
    parser_run_faunus.add_argument('id',
            type=int)
    parser_run_faunus.add_argument('algorithm',
            choices=['degrees'])
    parser_run_faunus.set_defaults(func=run_faunus)

    parser_run_graphlab = run_subparsers.add_parser('graphlab')
    parser_run_graphlab.add_argument('id',
            type=int)
    parser_run_graphlab.add_argument('algorithm',
            choices=['approximate_diameter', 'connected_component', 'connected_component_stats', 'directed_triangle_count', 'eigen_vector_normalization', 'graph_laplacian', 'kcore', 'pagerank', 'partitioning', 'simple_coloring', 'simple_undirected_triangle_count', 'sssp', 'TSC', 'undirected_triangle_count'])
    parser_run_graphlab.set_defaults(func=run_graphlab)

    parser_run_snap = run_subparsers.add_parser('snap')
    parser_run_snap.add_argument('id',
            type=int)
    parser_run_snap.add_argument('algorithm',
            choices=['centrality'])
    parser_run_snap.set_defaults(func=run_snap)

    parser_run_jung = run_subparsers.add_parser('jung')
    parser_run_jung.add_argument('-a', '--alpha',
            default=0.15,
            help='The PageRank alpha value (default 0.15)')
    parser_run_jung.add_argument('id',
            type=int)
    parser_run_jung.add_argument('algorithm',
            choices=['betweenness_centrality', 'pagerank'])
    parser_run_jung.set_defaults(func=run_jung)

    args = parser.parse_args()

    # The username and password could be embedded in the user, so split them
    # out.
    if args.user is not None and ':' in args.user:
        user, password = args.user.split(':', 1)
        args.user = user
        args.password = password

    # If we didn't get the username or password, prompt until we get it.
    while args.user is None or args.user == '':
        sys.stdout.write('Username: ')
        sys.stdout.flush()
        args.user = sys.stdin.readline().strip()

    while args.password is None or args.password == '':
        args.password = getpass.getpass()

    try:
        return args.func(args)
    except requests.HTTPError, e:
        print e
        print e.response.content
        return 1

# ----------------------------------------------------------------------------

if __name__ == '__main__':
    sys.exit(main())
